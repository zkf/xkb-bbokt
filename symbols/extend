// Extend mode symbols for xkb on X.Org Server 7.x
// 2012-01-01 Øystein Bech "DreymaR" Gadmar
// A modular Extend mapping layer like the one I have in Portable Keyboard Layout for Windows
// - I've used the method from the xkb/symbols/typo 'typographic keyboard' partial mappings
// - Key names are in /usr/include/X11/ keysymdef.h and XF86keysym.h (Removing the XK_ prefix)
// - These multimedia F keys are defined (the shifted versions are not implemented in WinPKL):
// These keys are modified/transposed by holding down the 'extend key' (CapsLock by default):
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Esc + |F1 <> |F2 << |F3 >> |F4 <> |F5 <> |F6 << |F7 >> |F8 <> |F9 <> |F10<> |F11<> |F12<> |
// |      | Pause| Rew  | Fwd  | Eject| Sleep| Bri- | Bri+ | Term | Home | Mail | App3 | App4 |
// | Caps | Play | Prev | Next | Stop | Mute | Vol- | Vol+ | Media| WWW  | Srch | App1 | App2 |
// +======+======+======+======+======+======+======+======+======+======+======+======+======+
// |` €€€ |1     |2     |3     |4     |5     |6     |7     |8     |9     |0     |-     |=     |
// | Del  | F1   | F2   | F3   | F4   | F5   | F6   | F7   | F8   | F9   | F10  | F11  | F12  |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Tab   |Q €€€ |W *** |F <<> |P <>> |G *** |J ### |L ### |U ### |Y ### |; €€€ |[ €€€ |] €€€ |
// |      | Esc  | *WhUp| BrBck| BrFwd| *MUp | PgUp | Home | Up   | End  | Del  | Esc  | Ins  |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Caps+ |A +++ |R *** |S +++ |T +++ |D *** |H ### |N ### |E ### |I ### |O €€€ |' €€€ |\ ><> |
// | ++++ | Alt  | *WhDn| Shift| Ctrl | *MDn | PgDn | Left | Down | Right| Back | Menu | BrFav|
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Z €€€ |X === |C === |V === |B *** |_ *** |K *** |M *** |, *** |. *** |/ *** |Spc € |Entr€ |
// | Undo | Cut  | Copy | Paste| *Bt1 | *MOn | *Bt2 | *Bt3 | *MLe | *MRi | *MOn | Enter| Break|
// +------+------+------+------+------+------+------+------+------+------+------+-------------+
// Legend: # Movement; + Modifiers; = GUI edit; * Mouse; <> MultiMedia; € Various commands.
//
// KeyPad overlay with nav block to the left (lv7-8):
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |` €€€ |1     |2     |3     |4 £   |5 €   |6     |7     |8     |9     |0     |-     |=     |
// | Del  |  !   |  @   |  #   |  $   |  %   |  ^   | KP_7 | KP_8 | KP_9 | KP_* | KP_- | KP_= |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Tab   |Q ### |W ### |F ### |P €€€ |G €€€ |J ### |L     |U     |Y     |;     |[ {   |] }   |
// |      | Home | Up   | End  | Del  | Esc  | PgUp | KP_4 | KP_5 | KP_6 | KP_+ |  (   |  )   |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Caps+ |A ### |R ### |S ### |T €€€ |D     |H ### |N     |E     |I     |O     |' "   |\ |   |
// | ++++ | Left | Down | Right| Back | KPBg | PgDn | KP_1 | KP_2 | KP_3 | K_En |  '   |  \   |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
// |Z €€€ |X === |C === |V === |B *** |_ *** |K     |M     |, ;   |. :   |/     |Spc   |Entr  |
// | Undo | Cut  | Copy | Paste| *Bt1 | *MOn | KPLk | KP_0 |  ,   | KP_. | KP_/ | Spc  | K_En |
// +------+------+------+------+------+------+------+------+------+------+------+------+------+
//
// TODO: Pointer/WheelScroll keys don't work even if PointerKeys are enabled? Only LBtn/RBtn.
// TODO: The Alt/Ctrl states work with the mapped arrow keys, but Shift doesn't work?!
//       Sending the Shift/Ctrl key names isn't enough? Also need a modifier_map line?
// TODO: Make a sensible function out of lv5 vs lv6? We need Shift+arrows (select) etc!
// TODO: What should lv7-8 do, ideally? NumPad? Accelerated keys? Fancy symbols? Greek?

default partial // alphanumeric_keys
xkb_symbols "lv5" {
//    name[Group1]= "Extend layer";
    key.type[group1]="EIGHT_LEVEL";

// Problem: If I set lv5-6 of Esc to Caps_Lock, lv1-4 are CapsLock PLUS Esc!
//    key <ESC>  { [ Escape , Escape , Escape , Escape , Caps_Lock , Caps_Lock ] };
    key <SCLK> { [ Scroll_Lock,Scroll_Lock,Scroll_Lock,Scroll_Lock, Caps_Lock , Caps_Lock ] };

    key <FK01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPlay         , XF86AudioPause        ] };
    key <FK02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPrev         , XF86AudioRewind       ] };
    key <FK03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioNext         , XF86AudioForward      ] };
    key <FK04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioStop         , XF86Eject             ] };
    key <FK05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMute         , XF86Sleep             ] };
    key <FK06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioLowerVolume  , XF86MonBrightnessDown ] };
    key <FK07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioRaiseVolume  , XF86MonBrightnessUp   ] };
    key <FK08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMedia        , XF86Terminal          ] };
    key <FK09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86WWW               , XF86HomePage          ] };
    key <FK10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Search            , XF86Mail              ] };
    key <FK11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Launch1           , XF86Launch3           ] };
    key <FK12> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Launch2           , XF86Launch4           ] };

    key <TLDE> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Delete  , Delete  , Delete      , Delete      ] };
    key <AE01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F1      , F1      , exclam      , exclam      ] };
    key <AE02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F2      , F2      , at          , at          ] };
    key <AE03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F3      , F3      , numbersign  , numbersign  ] };
    key <AE04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F4      , F4      , dollar      , sterling    ] };
    key <AE05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F5      , F5      , percent     , EuroSign    ] };
    key <AE06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F6      , F6      , asciicircum , asciicircum ] };
    key <AE07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F7      , F7      ,
                  KP_7              , 0x10021D6         ] }; // KP_7 ↖ ⇖
    key <AE08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F8      , F8      ,
                  KP_8              , 0x10021D1         ] }; // KP_8 ↑ ⇑
    key <AE09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F9      , F9      ,
                  KP_9              , 0x10021D7         ] }; // KP_9 ↗ ⇗
    key <AE10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F10     , F10     ,
                  KP_Multiply       , KP_Multiply       ] }; // KP_*
    key <AE11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F11     , F11     ,
                  KP_Subtract       , KP_Subtract       ] }; // KP_-
    key <AE12> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, F12     , F12     ,
                  KP_Equal          , KP_Equal          ] }; // KP_=
    //
    key <AD01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Escape            , Escape            , //Esc
                  Home              , KP_Home           ] }; // Home
    key <AD02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Up                , XF86ScrollUp      , //(††)
                  Up                , KP_Up             ] }; //    ↑
    key <AD03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Back          , XF86Back          , //BrBck
                  End               , KP_End            ] }; // End
    key <AD04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Forward       , XF86Forward       , //BrFwd
                  Delete            , KP_Delete         ] }; // Del
    key <AD05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Up        , Pointer_Up        , //(††)
                  Escape            , Escape            ] }; // Esc
    key <AD06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Page_Up           , Page_Up           , //PgUp
                  Page_Up           , KP_Prior          ] }; // PgUp
    key <AD07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Home              , Home              , //Home
                  KP_4              , 0x10021D0         ] }; // KP_4 ← ⇐
    key <AD08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Up                , Up                , // ↑
                  KP_5              , 0x10021D4         ] }; // KP_5 ↔ ⇔
    key <AD09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, End               , End               , //End
                  KP_6              , 0x10021D2         ] }; // KP_6 → ⇒
    key <AD10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Delete            , Delete            , //Del
                  KP_Add            , KP_Add            ] }; // KP_+
    key <AD11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Escape            , Escape            , //Esc
                  parenleft         , braceleft         ] }; //    (
    key <AD12> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Insert            , Insert            , //Ins
                  parenright        , braceright        ] }; //    )
    key <BKSL> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Favorites     , XF86Favorites     , // BrFav
                  backslash         , bar               ] }; // BKSL
    key <AC01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Alt_L             , Alt_L             , //Alt works!?
                  Left              , KP_Left           ] }; //    ←
    key <AC02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Down              , XF86ScrollDown    , //(††)
                  Down              , KP_Down           ] }; //    ↓
    key <AC03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Shift_L           , Shift_L           , //Shift(**)
                  Right             , KP_Right          ] }; //    →
    key <AC04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Control_L         , Control_L         , //Ctrl(**)
                  BackSpace         , BackSpace         ] }; // Back
    key <AC05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Down      , Pointer_Down      , //(††)
                  KP_Begin          , KP_Begin          ] }; // KP_Begin?!?
    key <AC06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Page_Down         , Page_Down         , //PgDn
                  Page_Down         , KP_Next           ] }; // PgDn
    key <AC07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Left              , Left              , // ←
                  KP_1              , 0x10021D9         ] }; // KP_1 ↙ ⇙
    key <AC08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Down              , Down              , // ↓
                  KP_2              , 0x10021D3         ] }; // KP_2 ↓ ⇓
    key <AC09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Right             , Right             , // →
                  KP_3              , 0x10021D8         ] }; // KP_3 ↘ ⇘
    key <AC10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, BackSpace         , BackSpace         , //Back
                  KP_Enter          , KP_Enter          ] }; // KP_Enter
    key <AC11> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Menu              , Menu              , //Menu
                  apostrophe        , quotedbl          ] }; //    ' "
    key <LSGT> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_EnableKeys, Pointer_EnableKeys, //Ptr_On
                  Pointer_EnableKeys,Pointer_EnableKeys ] }; // Enable mousing (works)
    key <AB01> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Undo          , XF86Undo          , //(**)
                  XF86Undo          , XF86Undo          ] }; // Undo(**)
    key <AB02> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Cut           , XF86Cut           , //(§§)
                  XF86Cut           , XF86Cut           ] }; // Cut(§§)
    key <AB03> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Copy          , XF86Copy          , //(§§)
                  XF86Copy          , XF86Copy          ] }; // Copy(§§)
    key <AB04> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Paste         , XF86Paste         , //(§§)
                  XF86Paste         , XF86Paste         ] }; // Paste(§§)
    key <AB05> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Button1   , Pointer_Button1   , //LBt(‡‡)
                  Pointer_Button1   , Pointer_Button1   ] }; // LBt
    key <AB06> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Button2   , Pointer_Button2   , //MBt(††)
                  Num_Lock          , Num_Lock          ] }; // NumLock
    key <AB07> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Button3   , Pointer_Button3   , //RBt(‡‡)
                  KP_0              , 0x10021D5         ] }; // KP_0 ↕ ⇕
    key <AB08> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Left      , Pointer_Left      , //(††)
                  comma             , semicolon         ] }; //    , ;
    key <AB09> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_Right     , Pointer_Right     , //(††)
                  KP_Decimal        , colon             ] }; // KP_. :
    key <AB10> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Pointer_EnableKeys, Pointer_EnableKeys, //(††)
                  KP_Divide         , KP_Divide         ] }; // KP_/
    //
    key <SPCE> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol, Return            , Return            , //Entr
                  space             , nobreakspace      ] }; // Spc
//    key <CAPS> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol ] };

// NOTE: The 6th state gives the symbol (for instance arrows) - but not shifted (arrow select)!
// NOTE: The WheelUp/WheelDn keys (<AD02>/<AC02>) didn't work, so for now I'm scrolling with Up/Dn instead.
// **: Currently not working!?
// §§: XCV Cut/Copy/Paste seem OK in Firefox but not Gedit!? Is this some GTK weakness?
// ††: 'Pointer_'mousing needs enabling?!? The KP_ mousing seems to work but not the Pointer_ mousing?
//    (The usual way is enabling the Shift+NumLock option for this, but Pointer_EnableKeys works too)
// ‡‡: Left/right buttons work when mousing is enabled? Nothing else?

    // begin modifier mappings
    modifier_map Shift  { Shift_L   , Shift_R   };
    modifier_map Lock   { Caps_Lock , ISO_Lock  };
    modifier_map Control{ Control_L , Control_R };

//  key <CAPS> { [ ISO_Level5_Shift , BackSpace , Caps_Lock , Caps_Lock , NoSymbol ] };
//  modifier_map Mod3   { ISO_Level5_Shift };

//    include "level3(ralt_switch)"
//    include "level5(caps_switch)"

// Maybe one could use the capslock(groupshift) functionality instead?
//    key <CAPS> { [ Mode_switch , BackSpace , Caps_Lock , Caps_Lock , NoSymbol ] };
//    // The capslock(groupshift) switch defines the <CAPS> ground state as a Mode_switch key.
// But: The 4 groups are also meant for different locales/scripts/layouts that people may need.

};
